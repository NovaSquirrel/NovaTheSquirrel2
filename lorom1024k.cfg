# ca65 linker config for 1024 KiB (8 Mbit) sfc file

# Physical areas of memory
MEMORY {
  # Reserve the first 24 bytes of RAM for local variables
  ZEROPAGE:   start =  $000018, size = $00E8;

  # Make sure to change BSS based on where you put
  # the stack and how big you expect it to get.
  # Unlike on the NES, we include shadow OAM in BSS here
  # because there's not as much of a benefit to having it
  # page-aligned.
  BSS:        start =  $000200, size = $1E00;
  BSS7E:      start =  $7E2000, size = $E000;
  BSS7F:      start =  $7F0000, size =$10000;

  # The fast ROM area starts at $808000.
  # It's mirrored into the slow ROM area.
  ROM0:      start =  $808000, type = ro, size = $8000, fill = yes;
  ROM1:      start =  $818000, type = ro, size = $8000, fill = yes;
  ROM2:      start =  $828000, type = ro, size = $8000, fill = yes;
  ROM3:      start =  $838000, type = ro, size = $8000, fill = yes;
  ROM4:      start =  $848000, type = ro, size = $8000, fill = yes;
  ROM5:      start =  $858000, type = ro, size = $8000, fill = yes;
  ROM6:      start =  $868000, type = ro, size = $8000, fill = yes;
  ROM7:      start =  $878000, type = ro, size = $8000, fill = yes;
  ROM8:      start =  $888000, type = ro, size = $8000, fill = yes;
  ROM9:      start =  $898000, type = ro, size = $8000, fill = yes;
  ROM10:      start =  $8A8000, type = ro, size = $8000, fill = yes;
  ROM11:      start =  $8B8000, type = ro, size = $8000, fill = yes;
  ROM12:      start =  $8C8000, type = ro, size = $8000, fill = yes;
  ROM13:      start =  $8D8000, type = ro, size = $8000, fill = yes;
  ROM14:      start =  $8E8000, type = ro, size = $8000, fill = yes;
  ROM15:      start =  $8F8000, type = ro, size = $8000, fill = yes;
  ROM16:      start =  $908000, type = ro, size = $8000, fill = yes;
  ROM17:      start =  $918000, type = ro, size = $8000, fill = yes;
  ROM18:      start =  $928000, type = ro, size = $8000, fill = yes;
  ROM19:      start =  $938000, type = ro, size = $8000, fill = yes;
  ROM20:      start =  $948000, type = ro, size = $8000, fill = yes;
  ROM21:      start =  $958000, type = ro, size = $8000, fill = yes;
  ROM22:      start =  $968000, type = ro, size = $8000, fill = yes;
  ROM23:      start =  $978000, type = ro, size = $8000, fill = yes;
  ROM24:      start =  $988000, type = ro, size = $8000, fill = yes;
  ROM25:      start =  $998000, type = ro, size = $8000, fill = yes;
  ROM26:      start =  $9A8000, type = ro, size = $8000, fill = yes;
  ROM27:      start =  $9B8000, type = ro, size = $8000, fill = yes;
  ROM28:      start =  $9C8000, type = ro, size = $8000, fill = yes;
  ROM29:      start =  $9D8000, type = ro, size = $8000, fill = yes;
  ROM30:      start =  $9E8000, type = ro, size = $8000, fill = yes;
  ROM31:      start =  $9F8000, type = ro, size = $8000, fill = yes;

  # The sound processor has its own address space
  SPCZEROPAGE:start =    $0010, size = $00E0;
  SPCRAM:     start =    $0200, size = $FDC0;
}

# Logical areas code/data can be put into.
SEGMENTS {
  # Read-only areas for main CPU
  CODE:       load = ROM0, type = ro, align = $100;
  Inventory:  load = ROM0, type = ro, align = $100, optional=yes;
  VWF:        load = ROM0, type = ro, align = $100, optional=yes;
  Dialog:     load = ROM0, type = ro, align = $100, optional=yes;
  PlayerGraphics:
              load = ROM1, type = ro, align = $100, optional=yes;
  Portraits:  load = ROM2, type = ro, align = $100, optional=yes;

  # Read-only areas for sound CPU
  SPCIMAGE:   load = ROM31, run=SPCRAM, align = $100, define=yes;

  # Areas for variables for main CPU
  ZEROPAGE:   load = ZEROPAGE, type = zp, define=yes;
  BSS:        load = BSS, type = bss, align = $100, optional=yes;
  BSS7E:      load = BSS7E, type = bss, align = $100, optional=yes;
  BSS7F:      load = BSS7F, type = bss, align = $100, optional=yes;

  # Areas for variables for sound CPU
  SPCZEROPAGE:load = SPCZEROPAGE, type=zp, optional=yes;
  SPCBSS:     load = SPCRAM, type = bss, align = $100, optional=yes;

  # Insert automatic banks here

  # Put SNESHEADER last to avoid bank overflow errors
  SNESHEADER: load = ROM0, type = ro, start = $80FFC0;
}
