# ca65 linker config for 1024 KiB (8 Mbit) sfc file

# Physical areas of memory
MEMORY {
  # I usually reserve $000000-$00000F for local variables
  # allocated just below the .proc statement of a subroutine.
  # The rest is open for global variables.
  ZEROPAGE:   start =  $000010, size = $00F0;

  # Make sure to change BSS based on where you put
  # the stack and how big you expect it to get.
  # Unlike on the NES, we include shadow OAM in BSS here
  # because there's not as much of a benefit to having it
  # page-aligned.
  BSS:        start =  $000200, size = $1E00;
  BSS7E:      start =  $7E2000, size = $E000;
  BSS7F:      start =  $7F0000, size =$10000;

  # The fast ROM area starts at $808000.
  # It's mirrored into the slow ROM area.
  ROM00:      start =  $808000, type = ro, size = $8000, fill = yes;
  ROM01:      start =  $818000, type = ro, size = $8000, fill = yes;
  ROM02:      start =  $828000, type = ro, size = $8000, fill = yes;
  ROM03:      start =  $838000, type = ro, size = $8000, fill = yes;
  ROM04:      start =  $848000, type = ro, size = $8000, fill = yes;
  ROM05:      start =  $858000, type = ro, size = $8000, fill = yes;
  ROM06:      start =  $868000, type = ro, size = $8000, fill = yes;
  ROM07:      start =  $878000, type = ro, size = $8000, fill = yes;
  ROM08:      start =  $888000, type = ro, size = $8000, fill = yes;
  ROM09:      start =  $898000, type = ro, size = $8000, fill = yes;
  ROM0A:      start =  $8A8000, type = ro, size = $8000, fill = yes;
  ROM0B:      start =  $8B8000, type = ro, size = $8000, fill = yes;
  ROM0C:      start =  $8C8000, type = ro, size = $8000, fill = yes;
  ROM0D:      start =  $8D8000, type = ro, size = $8000, fill = yes;
  ROM0E:      start =  $8E8000, type = ro, size = $8000, fill = yes;
  ROM0F:      start =  $8F8000, type = ro, size = $8000, fill = yes;
  ROM10:      start =  $908000, type = ro, size = $8000, fill = yes;
  ROM11:      start =  $918000, type = ro, size = $8000, fill = yes;
  ROM12:      start =  $928000, type = ro, size = $8000, fill = yes;
  ROM13:      start =  $938000, type = ro, size = $8000, fill = yes;
  ROM14:      start =  $948000, type = ro, size = $8000, fill = yes;
  ROM15:      start =  $958000, type = ro, size = $8000, fill = yes;
  ROM16:      start =  $968000, type = ro, size = $8000, fill = yes;
  ROM17:      start =  $978000, type = ro, size = $8000, fill = yes;
  ROM18:      start =  $988000, type = ro, size = $8000, fill = yes;
  ROM19:      start =  $998000, type = ro, size = $8000, fill = yes;
  ROM1A:      start =  $9A8000, type = ro, size = $8000, fill = yes;
  ROM1B:      start =  $9B8000, type = ro, size = $8000, fill = yes;
  ROM1C:      start =  $9C8000, type = ro, size = $8000, fill = yes;
  ROM1D:      start =  $9D8000, type = ro, size = $8000, fill = yes;
  ROM1E:      start =  $9E8000, type = ro, size = $8000, fill = yes;
  ROM1F:      start =  $9F8000, type = ro, size = $8000, fill = yes;

  # The sound processor has its own address space
  SPCZEROPAGE:start =    $0010, size = $00E0;
  SPCRAM:     start =    $0200, size = $FDC0;
}

# Logical areas code/data can be put into.
SEGMENTS {
  # Read-only areas for main CPU
  CODE:       load = ROM00, type = ro, align = $100;
  SNESHEADER: load = ROM00, type = ro, start = $80FFC0;
  Player:     load = ROM01, type = ro, align = $100, optional=yes;
  Graphics1:  load = ROM02, type = ro, align = $100, optional=yes;
  Graphics2:  load = ROM03, type = ro, align = $100, optional=yes;
  BlockGraphicData:
              load = ROM04, type = ro, align = $100, optional=yes;
  PlayerGraphics:
              load = ROM05, type = ro, align = $100, optional=yes;
  LevelDecompress:
              load = ROM06, type = ro, align = $100, optional=yes;
  BlockInteraction:
              load = ROM06, type = ro, align = $100, optional=yes;
  PaletteData:
              load = ROM07, type = ro, align = $100, optional=yes;
  ActorData:
              load = ROM07, type = ro, align = $100, optional=yes;
  PRG07:      load = ROM07, type = ro, align = $100, optional=yes;
  LevelBank1: load = ROM08, type = ro, align = $100, optional=yes;
  LevelBank2: load = ROM09, type = ro, align = $100, optional=yes;
  PRG0A:      load = ROM0A, type = ro, align = $100, optional=yes;
  PRG0B:      load = ROM0B, type = ro, align = $100, optional=yes;
  PRG0C:      load = ROM0C, type = ro, align = $100, optional=yes;
  PRG0D:      load = ROM0D, type = ro, align = $100, optional=yes;
  PRG0E:      load = ROM0E, type = ro, align = $100, optional=yes;
  PRG0F:      load = ROM0F, type = ro, align = $100, optional=yes;
  PRG10:      load = ROM10, type = ro, align = $100, optional=yes;
  PRG11:      load = ROM11, type = ro, align = $100, optional=yes;
  PRG12:      load = ROM12, type = ro, align = $100, optional=yes;
  PRG13:      load = ROM13, type = ro, align = $100, optional=yes;
  PRG14:      load = ROM14, type = ro, align = $100, optional=yes;
  PRG15:      load = ROM15, type = ro, align = $100, optional=yes;
  PRG16:      load = ROM16, type = ro, align = $100, optional=yes;
  PRG17:      load = ROM17, type = ro, align = $100, optional=yes;
  PRG18:      load = ROM18, type = ro, align = $100, optional=yes;
  PRG19:      load = ROM19, type = ro, align = $100, optional=yes;
  PRG1A:      load = ROM1A, type = ro, align = $100, optional=yes;
  PRG1B:      load = ROM1B, type = ro, align = $100, optional=yes;
  PRG1C:      load = ROM1C, type = ro, align = $100, optional=yes;
  PRG1D:      load = ROM1D, type = ro, align = $100, optional=yes;
  PRG1E:      load = ROM1E, type = ro, align = $100, optional=yes;
  PRG1F:      load = ROM1F, type = ro, align = $100, optional=yes;

  # Read-only areas for sound CPU
  SPCIMAGE:   load = ROM1F, run=SPCRAM, align = $100, define=yes;

  # Areas for variables for main CPU
  ZEROPAGE:   load = ZEROPAGE, type = zp, define=yes;
  BSS:        load = BSS, type = bss, align = $100, optional=yes;
  BSS7E:      load = BSS7E, type = bss, align = $100, optional=yes;
  BSS7F:      load = BSS7F, type = bss, align = $100, optional=yes;

  # Areas for variables for sound CPU
  SPCZEROPAGE:load = SPCZEROPAGE, type=zp, optional=yes;
  SPCBSS:     load = SPCRAM, type = bss, align = $100, optional=yes;

}
